{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"yMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAY9C,MAAO,CACL,sBAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,GAC5BR,GAAgB,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,QAI1C,SACE,uBACEC,KAAO,OACPC,MAAUT,EACVU,SAfoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,c,+BCLdG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,sDAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAYdM,GAZc,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACtC,OACE,sBAAKc,UAAU,OAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCAEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAK,GACLa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OATAC,qBAAW,WACTxB,EAAQC,GACPwB,MAAM,SAAAC,GACLH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IACGqB,EDT0BK,CAAa1B,GAAjCa,EAH0B,EAG/BN,KAAaa,EAHkB,EAGlBA,QACrB,OACE,qCACE,6BAAMpB,IACJoB,GAAW,4CAEX,qBAAKJ,UAAU,YAAf,SAGEH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEKA,GADGA,EAAIC,aEdXgB,EAAe,WAAO,IAAD,EACGzC,mBAAS,CAAC,cADb,mBAC1B0C,EAD0B,KACd3C,EADc,KAEhC,OACE,qCACA,iDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAaA,GADLA,Y,MCXpB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e2476550.chunk.js","sourcesContent":["import { useState } from \"react\"\nimport PropTypes  from \"prop-types\"\nexport const AddCategory = ({setCategorias}) => {\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(inputValue.trim().length > 2 ){\n      setCategorias ( cats => [inputValue, ...cats ]);\n    }\n  }\n  return [\n    <form onSubmit = { handleSubmit }>\n      <input \n        type = \"text\" \n        value = { inputValue }\n        onChange = { handleInputChange }\n      />\n    </form>\n  ]\n  \n}\n\nAddCategory.propTypes = {\n  setCategorias: PropTypes.func.isRequired\n}","export const getGifs = async ( category ) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&api_key=j6ulus10ZBuimF8pM4lre1VzhN1hrJyu`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n\n  const gifs = data.map ( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n  return gifs;\n}","export const GifGridItem = ({id, title, url}) => {\n  return (\n    <div className=\"card\">\n      <img src={ url } alt={ title } />\n      <p>{ title }</p>\n    </div>\n  )\n}","// import { useState, useEffect } from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n\n  \n  const { data:images, loading } = useFetchGifs(category);\n  return (\n    <>\n      <h3>{ category }</h3>\n      { loading && <p>Loading....</p> }\n\n      { <div className=\"card-grid\">\n      \n        { \n          images.map( img => (\n            <GifGridItem \n            key = { img.id }\n            { ...img }/>\n          ))\n        }\n      \n      </div> }\n    </>\n  )\n}","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data:[],\n    loading: true,\n  });\n  useEffect( () => {\n    getGifs(category)\n    .then( imgs => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    })\n  }, [category])\n  return state;\n}","import {useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n const [categorias, setCategorias] = useState([\"one punch\"]) ;\n  return (\n    <>\n    <h2> GiftExpertApp </h2>\n    <AddCategory setCategorias={ setCategorias } />\n    <hr/>\n    \n    <ol>\n      { \n        categorias.map( category => (\n          <GifGrid \n            key = { category }\n            category = { category }/>\n        ))\n      }\n    </ol>\n    </>\n  )\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}